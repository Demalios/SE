// exception.cc 
//      Entry point into the Nachos kernel from user programs.
//      There are two kinds of things that can cause control to
//      transfer back to here from user code:
//
//      syscall -- The user code explicitly requests to call a procedure
//      in the Nachos kernel.  Right now, the only function we support is
//      "Halt".
//
//      exceptions -- The user code does something that the CPU can't handle.
//      For instance, accessing memory that doesn't exist, arithmetic errors,
//      etc.  
//
//      Interrupts (which can also cause control to transfer from user
//      code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"

#ifdef CHANGED
#include "userthread.h"
#endif // CHANGED

//----------------------------------------------------------------------
// UpdatePC : Increments the Program Counter register in order to resume
// the user program immediately after the "syscall" instruction.
//----------------------------------------------------------------------
static void
UpdatePC ()
{
    int pc = machine->ReadRegister (PCReg);
    machine->WriteRegister (PrevPCReg, pc);
    pc = machine->ReadRegister (NextPCReg);
    machine->WriteRegister (PCReg, pc);
    pc += 4;
    machine->WriteRegister (NextPCReg, pc);
}


//----------------------------------------------------------------------
// ExceptionHandler
//      Entry point into the Nachos kernel.  Called when a user program
//      is executing, and either does a syscall, or generates an addressing
//      or arithmetic exception.
//
//      For system calls, the following is the calling convention:
//
//      system call code -- r2
//              arg1 -- r4
//              arg2 -- r5
//              arg3 -- r6
//              arg4 -- r7
//
//      The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//      "which" is the kind of exception.  The list of possible exceptions 
//      are in machine.h.
//----------------------------------------------------------------------

void
ExceptionHandler (ExceptionType which)
{
    int type = machine->ReadRegister (2);

    switch (which)
      {
	case SyscallException:
          {
	    switch (type)
	      {
		case SC_Halt:
		  {
		    DEBUG ('s', "Shutdown, initiated by user program.\n");
		    interrupt->Halt ();
		    break;
		  }
		#ifdef CHANGED
		  case SC_Exit:
		  {
		    DEBUG ('s', "Exit, initiated by user program.\n");
		    
		    int ret = machine->ReadRegister (4);
		    printf("Program terminated with %d.\n", ret);

		    interrupt->Halt ();
		    break;
		  }
		case SC_PutChar:
		  {
		    DEBUG ('s', "PutChar, initiated by user program.\n");
			synchconsole->SynchPutChar ( (char) machine->ReadRegister (4));
		    break;
		  }
		case SC_PutString:
		  {
		    DEBUG ('s', "PutString, initiated by user program.\n");
			int string = machine->ReadRegister (4);
			int totalCopied = 0;
			int numCharCopied = 0;

			while((numCharCopied = copyStringFromMachine(string+totalCopied, bufferString , MAX_STRING_SIZE)) == MAX_STRING_SIZE){
				totalCopied += numCharCopied;
				synchconsole->SynchPutString(bufferString);
			}

			synchconsole->SynchPutString(bufferString);
		    break;
		  }
		  case SC_GetChar:
		  {
		    DEBUG ('s', "GetChar, initiated by user program.\n");
			int c = synchconsole->SynchGetChar ();
			if((char) c == EOF ){
				printf("End of file detected.\n");
			}else{
				machine->WriteRegister(2, c);
			}
		    break;
		  }
		  case SC_GetString:
		  {
		    DEBUG ('s', "getstring, initiated by user program.\n");
			
			int to = machine->ReadRegister (4);
			int size = machine->ReadRegister (5);
			char buff[MAX_STRING_SIZE];
			ASSERT(buff != NULL);

			int totalGot = 0;
			int numCharGot = 0;
			
			while(size < MAX_STRING_SIZE && totalGot < size && buff[totalGot-2] != '\n' && buff[totalGot-1] != '\0'){
			  synchconsole->SynchGetString(buff, MAX_STRING_SIZE);
			  numCharGot = copyStringToMachine(buff, to, MAX_STRING_SIZE);
			  totalGot += numCharGot;
			  }

			if(totalGot != size)
			  {
			    synchconsole->SynchGetString(bufferString, MAX_STRING_SIZE);
			  }

			synchconsole->SynchPutString(bufferString);

		    break;
		  }
		  case SC_ThreadCreate:
		  {
		    DEBUG ('s', "ThreadCreate, initiated by user program.\n");
			
			int func = machine->ReadRegister (4);
			int args = machine->ReadRegister (5);

			int ret = do_ThreadCreate(func, args);

			machine->WriteRegister (2, ret);

		    break;
		  }
		  case SC_ThreadExit:
		  {
		    DEBUG ('s', "ThreadExit, initiated by user program.\n");
			
			do_ThreadExit();

		    break;
		  }
		#endif // CHANGED
		default:
		  {
		    printf("Unimplemented system call %d\n", type);
		    ASSERT(FALSE);
		  }
	      }

	    // Do not forget to increment the pc before returning!
	    UpdatePC ();
	    break;
	  }

	case PageFaultException:
	  if (!type) {
	    printf("NULL dereference at PC %x!\n", machine->registers[PCReg]);
	    ASSERT (FALSE);
	  } else {
	    printf ("Page Fault at address %x at PC %x\n", type, machine->registers[PCReg]);
	    ASSERT (FALSE);	// For now
	  }
	  break;

	default:
	  printf ("Unexpected user mode exception %d %d at PC %x\n", which, type, machine->registers[PCReg]);
	  ASSERT (FALSE);
      }
}
